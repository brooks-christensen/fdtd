# scripts/fig09_tfsf_in_reflect.py
import numpy as np, matplotlib.pyplot as plt
from fdtd_gradproj.materials import Material, region_array, eps0, mu0
from fdtd_gradproj.yee1d import Yee1DTEz
from fdtd_gradproj.boundaries import PEC1D, PMC1D, Mur1DPerEdge
from fdtd_gradproj.tfsf import TFSF1D
from fdtd_gradproj.sources import cosine_burst

c0 = 299_792_458.0
def mts_dt(dx): return dx/c0
def H_at_E_nodes(Hy):
    H = np.zeros(len(Hy)+1); H[1:-1] = 0.5*(Hy[:-1] + Hy[1:]); H[0]=H[1]; H[-1]=H[-2]; return H
eta0 = np.sqrt(mu0/eps0)

def run(boundary="mur", cycles=2.0):
    lam0 = 500e-9; dx = lam0/40; N = 2400; dt = mts_dt(dx); Tmax = 5000
    eps_r, sigma = region_array(N, Material(1.0,0.0), [])
    sim = Yee1DTEz(N, dx, dt, eps_r, sigma)

    # left Mur (absorbs any small left-going residual), configurable RB
    murL = Mur1DPerEdge(dx, dt, "left")
    rb = {"pec": PEC1D("right"), "pmc": PMC1D("right"), "mur": Mur1DPerEdge(dx, dt, "right")}[boundary]
    label = {"pec":"PEC","pmc":"PMC","mur":"Mur(1)"}[boundary]

    # TFSF region and source (few-cycle symmetric burst)
    i1, i2 = 500, 1800
    inj = TFSF1D(i1, i2, dx, dt)
    f0 = c0/lam0; t0 = 200*dt
    src = lambda t: cosine_burst(t, t0, f0, cycles=cycles)

    probe = 350
    E_t, H_t = [], []
    for n in range(Tmax):
        sim.step()
        inj.apply(sim, n, src)
        murL.apply(sim.Ez)
        (rb.apply(sim.Hy) if boundary=="pmc" else rb.apply(sim.Ez))
        H_nodes = H_at_E_nodes(sim.Hy)
        E_t.append(sim.Ez[probe]); H_t.append(H_nodes[probe])

    E_t = np.array(E_t); H_t = np.array(H_t)
    E_plus,  E_minus  = 0.5*(E_t + eta0*H_t), 0.5*(E_t - eta0*H_t)   # +x incident, −x reflected
    H_plus,  H_minus  =  E_plus/eta0,           -E_minus/eta0
    B_plus,  B_minus  = mu0*H_plus,            mu0*H_minus

    t_ps = np.arange(Tmax)*dt*1e12
    fig, ax = plt.subplots(2,2, figsize=(10,6), constrained_layout=True)
    ax[0,0].plot(t_ps, E_plus);  ax[0,0].set_title(f"E_incident  ({label})")
    ax[0,1].plot(t_ps, E_minus); ax[0,1].set_title(f"E_reflected ({label})")
    ax[1,0].plot(t_ps, B_plus);  ax[1,0].set_title(f"B_incident  ({label})")
    ax[1,1].plot(t_ps, B_minus); ax[1,1].set_title(f"B_reflected ({label})")
    for a in ax.ravel(): a.set_xlabel("t (ps)"); a.grid(True, alpha=0.3)
    ax[0,0].set_ylabel("E"); ax[0,1].set_ylabel("E"); ax[1,0].set_ylabel("B"); ax[1,1].set_ylabel("B")
    fig.suptitle(f"TFSF Incident/Reflected at probe x={probe*dx*1e6:.1f} µm, cycles={cycles}", y=1.02)
    fig.savefig(f"outputs/fig09_tfsf_{boundary}.png", dpi=200, bbox_inches="tight")
